// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	Mux16(a=instruction,b=aluout,sel=instruction[15], out=areginput); // select the a register input!

	Not(in=instruction[15],out=notopcode);

	// condition for the A register - instruction[5] = d1
	Or(a=instruction[5], b=notopcode, out=aregflag);
	ARegister(in=areginput, load=aregflag, out=aregoutput, out[0..14]=addressM); // the A-register

	// aluoutput stored in the D register if d2
	And(a=instruction[15], b=instruction[4],out=dload);
	DRegister(in=aluout,load=dload,out=dregout); // The D Register

	// Mux for input to Alu - selects between memory input or address value. i[12] = a
	Mux16(a=aregoutput,b=inM,sel=instruction[12],out=aluinput); 

	
	//prepare values for ALU - negate everything if A instruction
	And(a=instruction[11],b=instruction[15],out=zx);//c1
    And(a=instruction[10],b=instruction[15],out=nx);//c2
    Or(a=instruction[9],b=notopcode,out=zy);//c3
    Or(a=instruction[8],b=notopcode,out=ny);//c4
    And(a=instruction[7],b=instruction[15],out=f);//c5
	And(a=instruction[6],b=instruction[15],out=no);//c6
	//The Alu
	ALU(x=dregout,y=aluinput,zx=zx,nx=nx,zy=zy, ny=ny,f=f,no=no,out=aluout,out=outM,zr=zr, ng=ng);
	
	// jump selection logic! the jump bits j1,j2,j3 are 0,1,2
	// or the results
	Or(a=ng, b=zr, out=ngorzr);
	Not(in=ngorzr, out=notngorzr);
	And(a=instruction[2], b= ng, out=j1); // the first jump bit condition
	And(a=instruction[1], b=zr, out=j2); // the second jump bit
	And(a=instruction[0],b=notngorzr, out=j3); // the third jump bit
	Or(a=j1,b=j2,out=jtemp);
	Or(a=jtemp, b=j3, out=jumpflag); 
	And(a=jumpflag, b=instruction[15], out=load);
	PC(in=aregoutput,load=load,inc=true,reset=reset,out[0..14]=pc);

	// output writeM as d3 = instruction[3]
	And(a=instruction[15], b=instruction[3], out=writeM);

}
